            == MCI: Managed Compiler Infrastructure ==

                -- Installation --

        ++ POSIX ++

Installation on POSIX systems works through the Waf build system. You
can obtain Waf from: http://code.google.com/p/waf

Once installed, you must configure the project like so:

    $ waf configure

You can use the --prefix option to specify where to install to. This
defaults to '/usr/local' normally. The MCI Waf script also supports
two additional options:

    * --lp64 (= true)
      - Whether to build for 64-bit pointers.
    * --vim (= <none>)
      - Where to install Vim syntax files for IAL files. If you wish
        to enable this, you should probably set this value to ~/.vim
        or similar.

You will need to have both libffi and libdl installed for the build
to succeed. Your libffi installation must support the closure API.

For example, to build for a 32-bit CPU, do:

    $ waf configure --lp64=false

Or to include Vim syntax files:

    $ waf configure --vim=~/.vim

With the project configured, you can execute a build by doing:

    $ waf build_release

You can also use 'build_debug' to build with assertions and disable
function inlining.

Finally, to install:

    $ waf install_release

or 'install_debug' for a debug build.

Should you wish to uninstall the installed files at a later point,
simply execute:

    $ waf uninstall_release

or 'uninstall_debug' for a debug build.

You can optionally build the documentation, which includes a guide
to the compiler infrastructure and a framework reference:

    $ waf docs

The documentation will be placed in 'docs/_build'. You'll probably
be interested in 'docs/_build/html/index.html' primarily.

Finally, you can run the test suite to ensure everything is working
as it should:

    $ waf test_release

or 'test_debug' for debug builds.

        ++ Windows ++

Building on Windows is only supported via Visual D. Install your
compiler of choice and configure Visual D to use it.

You'll need the libffi library files. You can either build libffi
from source under Cygwin or MinGW, or you can download precompiled
binaries here: https://github.com/lycus/libffi-d/downloads

You need to make sure that either the Cygwin or MinGW version of the
library can be found via your library search paths. These can be set
in the global Visual D options.

Finally, select your desired solution configuration (Debug, Release,
or Test) and build the solution.

Note that the MCI cannot currently be compiled for 64-bit on Windows
with DMD, due to limitations in Optlink (among other things). It is
not a limitation in the MCI itself.
