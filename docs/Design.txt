            == MCI: Managed Compiler Infrastructure ==

                -- Design --

One of the core ideas in the MCI is that code is data. Code should not be
decomposed into hard-to-analyze assembly instructions; doing so serves no
actual purpose in today's world of computing. Instead, code can be fed to
the MCI in the form of a tree easily representing the original code. The
MCI then does the dirty work involving native compilation.

This approach has several advantages:

    * Optimization is much easier and faster.
    * Static analysis is extremely easy.
    * Extension of the object model is trivial.
    * Runtime introspection of compiled code is made much simpler.
    * Storing precise debugging info is easier.

While the MCI primarily works through being fed trees representing code,
it certainly can compile assembly-like code as well. This is, however, a
last-resort feature that you should avoid if you can. The language used
for this is called IAL (Intermediate Assembly Language). It is a plain
assembly-like instruction set with only very few high-level features, such
as typing. It has 65535 registers available in method scope, and has no
built-in stack, making it a virtual register machine. IAL is designed to
support any other type of assembly-like language; it should be easy to take
a language such as CIL/ILAsm and translate it into IAL, so that the MCI can
emit code for input that does not come in a tree form. IAL is completely
abstracted away if you only use the tree object model.
